---
description: Rule for deploying the current project to CloudStudio.
alwaysApply: false
enabled: true
updatedAt: 2025-10-03T07:50:29.944Z
---

Deploy the current project to CloudStudio.
   Follow the deployment workflow:
   <workflow>
      1. **MUST test locally first**: Before deploying, verify the project works correctly in local preview/browser.
      2. **Deploy content MUST match preview content**: The deployed files must be identical to what was actually viewed and tested in the browser.
      3. **Choose deployment scope based on preview method**:
         - If you previewed a built directory (e.g., opened dist/index.html), deploy the entire build folder
         - If you previewed specific files (e.g., opened individual HTML file), use 'paths' parameter to deploy only those files and their dependencies
         - If you used development server (npm run dev), deploy the entire project
      4. **File consistency check**: Ensure all files that were loaded in the browser preview are included in deployment
      5. Deploy using cloud studio deploy tools with appropriate file scope.
      6. If deployment fails, analyze the failure reason. Multiple failures need to feedback to user.
   </workflow>

   **File Selection Strategy**:
      - **Preview method determines deployment scope**: Match exactly what was tested in browser
      - **Built project preview**: Deploy entire build directory (dist/, build/, etc.)
      - **Individual file preview**: Use 'paths' parameter for specific files + dependencies
      - **Development server preview**: Deploy entire project with source code
      - **Critical rule**: Never deploy files that weren't part of the successful browser preview

   **Important**: Files and directories listed in .gitignore, as well as dependency libraries (node_modules, etc.), will be automatically excluded from deployment uploads. Only tracked project files will be deployed to the remote environment.
   
      
      Notes:
      - Some files or directories may be ignored when uploading.
      Ignore Info:
      ```
      <IgnoreFileInfo>
<!-- Common Ignore Files -->
<Common>
*.mp4
*.m4v
*.mkv
*.webm
*.mov
*.avi
*.wmv
*.flv
*.mp3
*.wav
*.m4a
*.flac
*.ogg
*.wma
*.weba
*.aac
*.7z
*.bz2
*.gz
*.rar
*.tar
*.xz
*.zip
*.vsix
*.tgz
*.xlsx
*.dmg
*.xls
*.xlsm
*.mdb
*.accdb
*.psd
*.ai
*.db
*.hex
*.map
*.wasm
*.pyc
*.pdb
*.sym
*.ts.map
*.js.map
*.otf
*.exe
*.dll
*.bin
*.dat
*.3gp
*.3g2
*.m2ts
*.mts
*.vob
*.ogv
*.oga
*.spx
*.opus
*.midi
*.mid
*.eot
*.lockb
*.isl
*.odt
*.ods
*.odp
*.odg
*.odf
*.sxw
*.sxc
*.sxi
*.sxd
*.sdc
*.cue
*.mdf
*.mds
*.vcd
*.toast
*.apk
*.msi
*.cab
*.tar.gz
*.tar.xz
*.tar.bz2
*.tar.lzma
*.tar.Z
*.tar.sz
*.lzma
*.pak
*.rmeta
*.rlib
*.parquet
node_modules/
foo.asar/
unpackage/
uni_modules/
static/bower_components/
.DS_Store
Thumbs.db
tsconfig.tsbuildinfo
</Common>
<!-- Project Specific Ignore Files -->
<Project>
<directory path="root">
/node_modules
/.next/
/out/
/build
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*
.env*
.vercel
*.tsbuildinfo
next-env.d.ts
</directory>
</Project>
</IgnoreFileInfo>
      ```,